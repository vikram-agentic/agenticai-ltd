import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface SEORequest {
  topic: string;
  targetKeywords: string[];
  contentType: string;
  tone: string;
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { topic, targetKeywords, contentType, tone }: SEORequest = await req.json();

    if (!topic) {
      throw new Error('Topic is required');
    }

    console.log('Generating SEO content for:', { topic, contentType, tone });

    // Real Gemini API call
    const GEMINI_API_KEY = Deno.env.get('GEMINI_API_KEY');
    if (!GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY not configured');
    }

    const prompt = `Generate SEO-optimized titles and meta descriptions for:

Topic: ${topic}
Content Type: ${contentType}
Target Keywords: ${targetKeywords.join(', ')}
Tone: ${tone}

Requirements:
1. Create 5 compelling SEO titles (50-60 characters each)
2. Create 5 meta descriptions (150-160 characters each)
3. Include target keywords naturally
4. Make them click-worthy and engaging
5. Follow SEO best practices

Return the response in JSON format:
{
  "titles": ["title1", "title2", "title3", "title4", "title5"],
  "metaDescriptions": ["meta1", "meta2", "meta3", "meta4", "meta5"]
}`;

    const geminiResponse = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${GEMINI_API_KEY}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }],
          generationConfig: {
            temperature: 0.8,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
          }
        })
      }
    );

    if (!geminiResponse.ok) {
      const errorText = await geminiResponse.text();
      console.error('Gemini API error:', errorText);
      throw new Error(`Gemini API failed: ${geminiResponse.status}`);
    }

    const geminiData = await geminiResponse.json();
    
    if (!geminiData.candidates || !geminiData.candidates[0]?.content?.parts?.[0]?.text) {
      throw new Error('No content generated by Gemini');
    }

    const generatedText = geminiData.candidates[0].content.parts[0].text;
    console.log('Generated text:', generatedText);

    // Parse JSON from generated text
    let seoContent;
    try {
      // Extract JSON from the response
      const jsonMatch = generatedText.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        seoContent = JSON.parse(jsonMatch[0]);
      } else {
        throw new Error('No JSON found in response');
      }
    } catch (parseError) {
      console.error('JSON parse error:', parseError);
      // Fallback parsing
      const titles = [];
      const metaDescriptions = [];
      
      const lines = generatedText.split('\n');
      let currentSection = '';
      
      for (const line of lines) {
        const cleanLine = line.trim();
        if (cleanLine.toLowerCase().includes('title')) {
          currentSection = 'titles';
        } else if (cleanLine.toLowerCase().includes('meta') || cleanLine.toLowerCase().includes('description')) {
          currentSection = 'meta';
        } else if (cleanLine && !cleanLine.startsWith('#') && !cleanLine.startsWith('*')) {
          if (currentSection === 'titles' && titles.length < 5) {
            titles.push(cleanLine.replace(/^[\d\-\*\.\s]+/, '').replace(/"/g, ''));
          } else if (currentSection === 'meta' && metaDescriptions.length < 5) {
            metaDescriptions.push(cleanLine.replace(/^[\d\-\*\.\s]+/, '').replace(/"/g, ''));
          }
        }
      }
      
      seoContent = { titles, metaDescriptions };
    }

    // Validate results
    if (!seoContent.titles || !Array.isArray(seoContent.titles) || seoContent.titles.length === 0) {
      seoContent.titles = [
        `${topic} - Complete Guide ${new Date().getFullYear()}`,
        `How to ${topic}: Expert Tips & Strategies`,
        `${topic}: Everything You Need to Know`,
        `The Ultimate ${topic} Guide for Beginners`,
        `Master ${topic}: Professional Insights & Best Practices`
      ];
    }

    if (!seoContent.metaDescriptions || !Array.isArray(seoContent.metaDescriptions) || seoContent.metaDescriptions.length === 0) {
      seoContent.metaDescriptions = [
        `Discover everything about ${topic}. Expert insights, practical tips, and proven strategies to help you succeed. Get started today!`,
        `Learn ${topic} from industry experts. Complete guide with actionable tips, best practices, and real-world examples. Start now!`,
        `Master ${topic} with our comprehensive guide. Step-by-step instructions, expert advice, and proven techniques. Join thousands!`,
        `Get expert guidance on ${topic}. Practical strategies, insider tips, and proven methods to achieve your goals. Learn more!`,
        `Transform your approach to ${topic}. Professional insights, detailed guides, and actionable strategies. Start your journey!`
      ];
    }

    // Ensure proper lengths
    seoContent.titles = seoContent.titles.slice(0, 5).map((title: string) => 
      title.length > 60 ? title.substring(0, 57) + '...' : title
    );
    
    seoContent.metaDescriptions = seoContent.metaDescriptions.slice(0, 5).map((desc: string) => 
      desc.length > 160 ? desc.substring(0, 157) + '...' : desc
    );

    console.log('Final SEO content:', seoContent);

    return new Response(JSON.stringify({
      success: true,
      titles: seoContent.titles,
      metaDescriptions: seoContent.metaDescriptions,
      topic,
      contentType,
      tone,
      generatedAt: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('SEO generation error:', error);

    return new Response(JSON.stringify({
      success: false,
      error: error.message,
      fallback: {
        titles: [
          "Professional SEO-Optimized Title",
          "Expert Guide & Best Practices",
          "Complete Solution for Success",
          "Industry-Leading Strategies",
          "Proven Methods & Techniques"
        ],
        metaDescriptions: [
          "Get expert insights and proven strategies. Comprehensive guide with actionable tips and best practices for guaranteed success.",
          "Discover professional solutions and industry-leading techniques. Complete resource with step-by-step guidance and examples.",
          "Learn from experts and master proven methods. Detailed guide with practical tips and real-world applications for success.",
          "Access professional strategies and insider knowledge. Complete toolkit with expert advice and actionable recommendations.",
          "Transform your approach with expert guidance. Comprehensive resource featuring proven techniques and professional insights."
        ]
      }
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
